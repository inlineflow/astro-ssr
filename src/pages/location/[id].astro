---
import { actions } from "astro:actions";
// import { validateService } from "src/validations/service";
import ErrorMessage from "src/components/astro/error-message.astro";
import BaseLayout from "src/layouts/BaseLayout.astro";
import Form from "components/astro/form.astro";
import FormSkeleton from "src/components/astro/form-skeleton.astro";
import { Toaster } from "components/react/shadcn/ui/sonner";
import LocationDescription from "components/astro/location-description.astro";
import LocationDescriptionSkeleton from "components/astro/location-description-skeleton.astro";
import type { LocationLight } from "src/lib/schema";

export const prerender = false;
const { id } = Astro.params;

if (!id) {
  return Astro.redirect(400);
}

// let location: Location = {} as Location;
const { data: location, error: fetchError } = await Astro.callAction(
  actions.location.getLocation,
  { id: id }
);

// const { data: validatedEstablishment, error: invalidEstablishmentError } =
//   validateService(establishment);
const errors = [fetchError].filter((e) => e !== undefined);

let locLight = {} as LocationLight;
if (!fetchError) {
  locLight = {
    name: location.name,
    address: location.address,
    closingTime: location.closingTime,
    establishmentId: location.establishmentId,
    locationId: location.locationId,
    openingTime: location.openingTime,
    photo: location.photo,
  };
} // let location: Location = {} as Location;
// const { services, employees, ...locLight } = location!;
// console.log(validatedEstablishment);
---

<BaseLayout>
  <div class="">
    {
      location && (
        <div class="flex justify-center items-center min-w-screen">
          <div class="flex flex-col items-center gap-5 p-10">
            <LocationDescription validLocationLight={locLight} server:defer>
              <LocationDescriptionSkeleton slot="fallback" />
            </LocationDescription>
            <Form validLocation={location} server:defer>
              <FormSkeleton slot="fallback" />
            </Form>
          </div>
        </div>
      )
    }
    {errors && <ErrorMessage errors={errors} />}
  </div>
  <Toaster client:load />
</BaseLayout>
