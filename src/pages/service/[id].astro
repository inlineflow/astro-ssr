---
import { actions } from "astro:actions";
import { validateService } from "root/src/validations/service";
import ErrorMessage from "root/src/components/astro/error-message.astro";
import ServiceDescription from "root/src/components/astro/service-description.astro";
import BaseLayout from "root/src/layouts/BaseLayout.astro";
// import Form from "root/src/components/astro/form.astro";
import Form from "components/astro/form.astro";
import FormSkeleton from "root/src/components/astro/form-skeleton.astro";
import ServiceDescriptionSkeleton from "root/src/components/astro/service-description-skeleton.astro";

export const prerender = false;
const { id: idParam } = Astro.params;

if (!idParam) {
  return Astro.redirect(400);
}

const id = parseInt(idParam);

const { data: service, error: serviceError } = await Astro.callAction(
  actions.getService,
  { id: id }
);

const { data: validatedService, error: invalidServiceError } =
  validateService(service);
const errors = [serviceError, invalidServiceError].filter(
  (e) => e !== undefined
);

console.log(validatedService);
---

<BaseLayout>
  <div class="">
    {
      validatedService && (
        <div class="flex justify-center items-center min-w-screen">
          <div class="flex flex-col items-center gap-5 p-10">
            <ServiceDescription service={validatedService} server:defer>
              <ServiceDescriptionSkeleton slot="fallback" />
            </ServiceDescription>
            <Form validService={validatedService} server:defer>
              <FormSkeleton slot="fallback" />
            </Form>
          </div>
        </div>
      )
    }
    {errors && <ErrorMessage errors={errors} />}
  </div>
</BaseLayout>
